services:
  larasmart-nginx:
    build:
      context: .docker/nginx
    ports:
      - ${PROXY_PORT:-8081}:8081
    volumes:
      - "./backend:/var/www/html"
    depends_on:
      - larasmart-fpm
    x-def-logging: &default-logging
      logging:
        driver: "loki"
        options:
          loki-url: ${LOKI_PLUGIN_URL}
          loki-batch-size: "100"
          loki-retries: 2
          loki-max-backoff: 1000ms
          loki-timeout: 1s
    <<: *default-logging
    networks:
      - larasmart-network

  larasmart-fpm:
    container_name: larasmart-fpm
    build:
      context: .docker/php
    volumes:
      - "./backend:/var/www/html"
    environment:
      - XDG_CONFIG_HOME=${XDG_CONFIG_HOME}
    depends_on:
      larasmart-mysql:
        condition: service_healthy
    <<: *default-logging
    networks:
      - larasmart-network

  larasmart-mysql:
    build:
      context: .docker/mysql
    ports:
      - ${MYSQL_PORT:-3306}:3306
    volumes:
      - mysql-storage:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    <<: *default-logging
    networks:
      - larasmart-network

  larasmart-redis:
    build:
      context: .docker/redis
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis-storage:/data
    depends_on:
      - larasmart-fpm
    <<: *default-logging
    networks:
      - larasmart-network

  larasmart-prometheus:
    build:
      context: .docker/prometheus
    ports:
      - ${PROM_PORT:-9090}:9090
    networks:
      - larasmart-network
    command:
      - "--config.file=/etc/prometheus/config.yml"
    restart: unless-stopped

  larasmart-node-exporter:
    image: prom/node-exporter:latest
    ports:
      - ${NODE_EXPORTER_PORT:-9100}:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    depends_on:
      - larasmart-prometheus
    networks:
      - larasmart-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  larasmart-grafana:
    image: grafana/grafana
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - larasmart-prometheus
      - larasmart-loki
    networks:
      - larasmart-network

  larasmart-promtail:
    build:
      context: .docker/promtail
    volumes:
      - /var/log:/var/log/host
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - larasmart-network

  larasmart-loki:
    build:
      context: .docker/loki
    ports:
      - ${LOKI_PORT:-3100}:3100
    depends_on:
      - larasmart-prometheus
    command:
      - "--config.file=/etc/loki/config.yaml"
    networks:
      - larasmart-network

  larasmart-ollama:
    container_name: larasmart-ollama
    build:
      context: .docker/ollama
    healthcheck:
      test: [ "CMD", "ollama", "list" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    tty: true
    ports:
      - ${OLLAMA_PORT:-11434}:11434
    networks:
      - larasmart-network
    volumes:
      - ollama-storage:/root/.ollama
    deploy:
        resources:
          reservations:
            devices:
              - capabilities: [ gpu ]

networks:
  larasmart-network:

volumes:
  grafana-storage:
  redis-storage:
  mysql-storage:
  ollama-storage: